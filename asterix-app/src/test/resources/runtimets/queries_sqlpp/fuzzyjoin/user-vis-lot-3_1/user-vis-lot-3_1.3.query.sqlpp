/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

use fuzzyjoin;


select element {'user':user,'visitor':visitor,'sim':ridpair.sim}
from  (
    select element {'uid':uid,'vid':vid,'sim':sim[0]}
    from  Users as user,
          fuzzyjoin."subset-collection"(tokensUser,0,fuzzyjoin."prefix-len-jaccard"(lenUser,0.500000f)) as prefixTokenUser,
          Visitors as visitor,
          fuzzyjoin."subset-collection"(tokensVisitor,0,fuzzyjoin."prefix-len-jaccard"(lenVisitor,0.500000f)) as prefixTokenVisitor
    with  lenUser as fuzzyjoin.len(user.lottery_numbers),
          tokensUser as (
          select element i
          from  user.lottery_numbers as token,
                (
              select element tokenGroupped
              from  Users as user,
                    user.lottery_numbers as token
              group by token as tokenGroupped
              order by fuzzyjoin.count(user)
          ) as tokenRanked at i
          where (token = tokenRanked)
          order by i
      ),
          lenVisitor as fuzzyjoin.len(visitor.lottery_numbers),
          tokensVisitor as (
          select element i
          from  visitor.lottery_numbers as token,
                (
              select element tokenGroupped
              from  Users as user,
                    user.lottery_numbers as token
              group by token as tokenGroupped
              order by fuzzyjoin.count(user)
          ) as tokenRanked at i
          where (token = tokenRanked)
          order by i
      ),
          sim as fuzzyjoin."similarity-jaccard-prefix"(lenUser,tokensUser,lenVisitor,tokensVisitor,prefixTokenUser,0.500000f)
    where ((prefixTokenUser = prefixTokenVisitor) and (sim >= 0.500000f))
    group by user.uid as uid,visitor.vid as vid
) as ridpair,
      Users as user,
      Visitors as visitor
where ((ridpair.uid = user.uid) and (ridpair.vid = visitor.vid))
order by user.uid,visitor.vid
;
