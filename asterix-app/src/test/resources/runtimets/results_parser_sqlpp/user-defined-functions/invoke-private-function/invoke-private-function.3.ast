DataverseUse test
Query:
LetVariable [ Name=a ]
  :=
  OrderedListConstructor [
  ]
LetVariable [ Name=b ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
  ]
LetVariable [ Name=c ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
  ]
LetVariable [ Name=d ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [jkl]
  ]
LetVariable [ Name=e ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
  ]
LetVariable [ Name=f ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [jkl]
    LiteralExpr [STRING] [cde]
  ]
LetVariable [ Name=g ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [Efg]
    LiteralExpr [STRING] [aBc]
    LiteralExpr [STRING] [cdE]
    LiteralExpr [STRING] [DEf]
    LiteralExpr [STRING] [hIJ]
    LiteralExpr [STRING] [IjK]
    LiteralExpr [STRING] [BCD]
  ]
LetVariable [ Name=h ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [jkl]
    LiteralExpr [STRING] [cde]
  ]
LetVariable [ Name=results ]
  :=
  OrderedListConstructor [
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=a ]
      Variable [ Name=b ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=b ]
      Variable [ Name=a ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=c ]
      Variable [ Name=d ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=d ]
      Variable [ Name=c ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=e ]
      Variable [ Name=f ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=f ]
      Variable [ Name=e ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=g ]
      Variable [ Name=h ]
    ]
    FunctionCall test.similarity-jaccard@2[
      Variable [ Name=h ]
      Variable [ Name=g ]
    ]
  ]
SELECT ELEMENT [
Variable [ Name=i ]
]
FROM [  Variable [ Name=results ]
  AS
  Variable [ Name=i ]
]
