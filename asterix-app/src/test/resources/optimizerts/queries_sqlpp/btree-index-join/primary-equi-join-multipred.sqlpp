/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description    : Equi joins two datasets, Customers and Orders, based on the customer id.
 *                  Given the 'indexnl' hint we expect the join to be transformed
 *                  into an indexed nested-loop join using Customers' primary index.
 *                  We expect the additional predicates to be put into a select above the 
 *                  primary index search.
 * Success        : Yes
 */

drop  database test if exists;
create  database test;

use test;


create type test.AddressType as
 closed {
  number : int32,
  street : string,
  city : string
}

create type test.CustomerType as
 closed {
  cid : int32,
  name : string,
  age : int32?,
  address : AddressType?,
  lastorder : {
      oid : int32,
      total : float
  }

}

create type test.OrderType as
 closed {
  oid : int32,
  cid : int32,
  orderstatus : string,
  orderpriority : string,
  clerk : string,
  total : float
}

create  table Customers(CustomerType) primary key cid;

create  table Orders(OrderType) primary key oid;

write output to nc1:"rttest/btree-index-join_primary-equi-join-multipred.adm"
select element {'customer':c,'order':o}
from  Customers as c,
      Orders as o
where ((c.cid /*+ indexnl */  = o.cid) and (c.name < o.orderstatus) and (c.age < o.cid))
;
