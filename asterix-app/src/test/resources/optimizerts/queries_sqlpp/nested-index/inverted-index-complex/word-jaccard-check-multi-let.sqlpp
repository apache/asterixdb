/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description    : Tests whether a keyword index is applied to optimize a selection query using the similarity-jaccard-check function on word tokens.
 *                  Tests that the optimizer rule correctly drills through the let clauses.
 *                  The index should be applied.
 * Success        : Yes
 */

drop  database test if exists;
create  database test;

use test;


create type test.DBLPTypetmp as
 closed {
  id : int32,
  dblpid : string,
  title : string,
  authors : string,
  misc : string
}

create type test.DBLPType as
 closed {
  nested : DBLPTypetmp
}

create  table DBLP(DBLPType) primary key nested.id;

create  index keyword_index  on DBLP (nested.title) type keyword;

write output to nc1:"rttest/inverted-index-complex_word-jaccard-check-multi-let.adm"
select element {'Paper':paper_tokens,'Query':query_tokens}
from  DBLP as paper
with  paper_tokens as test."word-tokens"(paper.nested.title),
      query_tokens as test."word-tokens"('Transactions for Cooperative Environments'),
      jacc as test."similarity-jaccard-check"(paper_tokens,query_tokens,0.800000f)
where jacc[0]
;
