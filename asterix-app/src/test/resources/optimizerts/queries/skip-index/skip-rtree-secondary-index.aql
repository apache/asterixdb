/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description  : Notice the query hint to avoid using any secondary index to evaluate the predicate in the where clause
 * Expected Res : Success
 * Date         : 21th December 2013
 */
 
drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type MyRecord as closed {
  id: int32,
  point: point,
  kwds: string,
  line1: line,
  line2: line,
  poly1: polygon,
  poly2: polygon,
  rec: rectangle,
  circle: circle
}

create nodegroup group1  if not exists on asterix_nc1, asterix_nc2;

create dataset MyData(MyRecord)
  primary key id on group1;

load dataset MyData 
using "org.apache.asterix.external.dataset.adapter.NCFileSystemAdapter"
(("path"="asterix_nc1://data/spatial/spatialData.json"),("format"="adm")) pre-sorted;

create index rtree_index_point on MyData(point) type rtree;


write output to asterix_nc1:"rttest/index_rtree-secondary-index.adm";

for $o in dataset('MyData')
where /*+ skip-index */ spatial-intersect($o.point, create-polygon([4.0,1.0,4.0,4.0,12.0,4.0,12.0,1.0]))
return {"id":$o.id}
