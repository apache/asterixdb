/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description  : Notice the query hint to use an indexed nested-loops join plan in both predicates.
 *              : We expect a plan to have a self-join, which probes dataset Namesâ€™s with a prefix of its primary index.
 * Expected Res : Success
 * Date         : 11th November 2014
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type Name as open {
    fname : string,
    lname : string
}

create dataset Names(Name) primary key fname,lname;

write output to asterix_nc1:"rttest/btree-index-join_primary-composite-key-prefix-prefix-join_03.adm";

for $emp1 in dataset('Names') 
for $emp2 in dataset('Names') 
where $emp1.fname /*+ indexnl*/> $emp2.fname and $emp1.lname /*+ indexnl*/= $emp2.lname
return {"emp1": $emp1, "emp2": $emp2 }
