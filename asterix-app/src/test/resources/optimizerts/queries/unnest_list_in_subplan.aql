/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
drop dataverse fuzzyjoin if exists;
create dataverse fuzzyjoin;
use dataverse fuzzyjoin;

create type DBLPType as closed {
  id: int32, 
  dblpid: string,
  title: string,
  authors: string,
  misc: string
}

create type TOKENSRANKEDADMType as closed {
  token: int32,
  rank: int32
}

create nodegroup group1 if not exists on asterix_nc1, asterix_nc2;

create dataset DBLP(DBLPType) primary key id on group1;
create dataset TOKENSRANKEDADM(TOKENSRANKEDADMType) primary key rank on group1;

write output to asterix_nc1:'rttest/unnest_list_in_subplan.adm';

    //
    // -- - Stage 2 - --
    //
    for $paperDBLP in dataset('DBLP')
    let $idDBLP := $paperDBLP.id
    let $tokensUnrankedDBLP := counthashed-word-tokens($paperDBLP.title)
    let $tokensDBLP :=
        for $tokenUnranked in $tokensUnrankedDBLP
        for $tokenRanked in dataset('TOKENSRANKEDADM')
        where $tokenUnranked = $tokenRanked.token
        order by $tokenRanked.rank
        return $tokenRanked.rank
    return {'id': $idDBLP, 'tokens': $tokensDBLP}
