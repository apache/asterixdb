/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/*
 * Description    : Tests whether an ngram_index is applied to optimize a selection query using the edit-distance-check function on lists.
 *                  Tests that the optimizer rule correctly drills through the let clauses.
 *                  The index should *not* be applied (see below).
 * Success        : Yes
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type AddressType as closed {
  number: int32,
  street: string,
  city: string
}

create type CustomerTypetmp as closed {
  cid: int32,
  name: string,
  age: int32?,
  address: AddressType?,
  interests: [string],
  children: [ { name: string, age: int32? } ]
}

create type CustomerType as closed {
  nested : CustomerTypetmp
}

create dataset Customers(CustomerType) primary key nested.cid;
 
create dataset Customers2(CustomerType) primary key nested.cid;

create index interests_index on Customers(nested.interests) type keyword;

write output to asterix_nc1:"rttest/inverted-index-complex_olist-edit-distance-check-let-panic.adm";

for $c in dataset('Customers')
let $ed := edit-distance-check($c.nested.interests, ["computers", "wine", "walking"], 3)
where $ed[0]
order by $c.nested.cid
return $c
