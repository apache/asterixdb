DataverseUse test
Query:
Let Variable [ Name=$itv1 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2010-10-30]
    ]
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2010-12-21]
    ]
  ]
Let Variable [ Name=$itv2 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2011-10-30]
    ]
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2012-10-21]
    ]
  ]
Let Variable [ Name=$itv3 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2010-12-21]
    ]
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2013-01-01]
    ]
  ]
Let Variable [ Name=$blnBefore1 ]
  :=
  FunctionCall asterix.interval-before@2[
    Variable [ Name=$itv1 ]
    Variable [ Name=$itv2 ]
  ]
Let Variable [ Name=$blnAfter1 ]
  :=
  FunctionCall asterix.interval-after@2[
    Variable [ Name=$itv2 ]
    Variable [ Name=$itv1 ]
  ]
Let Variable [ Name=$blnBefore2 ]
  :=
  FunctionCall asterix.interval-before@2[
    Variable [ Name=$itv1 ]
    Variable [ Name=$itv3 ]
  ]
Let Variable [ Name=$blnAfter2 ]
  :=
  FunctionCall asterix.interval-after@2[
    Variable [ Name=$itv3 ]
    Variable [ Name=$itv1 ]
  ]
Let Variable [ Name=$itv4 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2012-06-26T01:01:01.111]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2012-07-27T02:02:02.222]
    ]
  ]
Let Variable [ Name=$itv5 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [20120727T020202222]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2013-08-08T03:03:03.333]
    ]
  ]
Let Variable [ Name=$itv6 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [19000707T020202222]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2013-08-07T03:03:03.333]
    ]
  ]
Let Variable [ Name=$blnMeet1 ]
  :=
  FunctionCall asterix.interval-meets@2[
    Variable [ Name=$itv4 ]
    Variable [ Name=$itv5 ]
  ]
Let Variable [ Name=$blnMetBy1 ]
  :=
  FunctionCall asterix.interval-met-by@2[
    Variable [ Name=$itv5 ]
    Variable [ Name=$itv4 ]
  ]
Let Variable [ Name=$blnMeet2 ]
  :=
  FunctionCall asterix.interval-meets@2[
    Variable [ Name=$itv6 ]
    Variable [ Name=$itv4 ]
  ]
Let Variable [ Name=$blnMetBy2 ]
  :=
  FunctionCall asterix.interval-met-by@2[
    Variable [ Name=$itv6 ]
    Variable [ Name=$itv4 ]
  ]
Let Variable [ Name=$itv7 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [12:32:38]
    ]
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [20:29:20]
    ]
  ]
Let Variable [ Name=$itv8 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [17:48:19]
    ]
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [22:19:49]
    ]
  ]
Let Variable [ Name=$itv9 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [01:32:49]
    ]
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [17:48:19]
    ]
  ]
Let Variable [ Name=$blnOverlaps1 ]
  :=
  FunctionCall asterix.interval-overlaps@2[
    Variable [ Name=$itv7 ]
    Variable [ Name=$itv8 ]
  ]
Let Variable [ Name=$blnOverlapped1 ]
  :=
  FunctionCall asterix.interval-overlapped-by@2[
    Variable [ Name=$itv8 ]
    Variable [ Name=$itv7 ]
  ]
Let Variable [ Name=$blnOverlaps2 ]
  :=
  FunctionCall asterix.interval-overlaps@2[
    Variable [ Name=$itv9 ]
    Variable [ Name=$itv8 ]
  ]
Let Variable [ Name=$blnOverlapped2 ]
  :=
  FunctionCall asterix.interval-overlapped-by@2[
    Variable [ Name=$itv8 ]
    Variable [ Name=$itv9 ]
  ]
Let Variable [ Name=$blnOverlap1 ]
  :=
  FunctionCall asterix.interval-overlapping@2[
    Variable [ Name=$itv9 ]
    Variable [ Name=$itv7 ]
  ]
Let Variable [ Name=$blnOverlap2 ]
  :=
  FunctionCall asterix.interval-overlapping@2[
    Variable [ Name=$itv9 ]
    Variable [ Name=$itv8 ]
  ]
Let Variable [ Name=$itv10 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2010-10-30]
    ]
    FunctionCall asterix.date@1[
      LiteralExpr [STRING] [2010-11-30]
    ]
  ]
Let Variable [ Name=$blnStarts1 ]
  :=
  FunctionCall asterix.interval-starts@2[
    Variable [ Name=$itv10 ]
    Variable [ Name=$itv1 ]
  ]
Let Variable [ Name=$blnStarts2 ]
  :=
  FunctionCall asterix.interval-starts@2[
    Variable [ Name=$itv10 ]
    Variable [ Name=$itv2 ]
  ]
Let Variable [ Name=$blnStartedBy1 ]
  :=
  FunctionCall asterix.interval-started-by@2[
    Variable [ Name=$itv1 ]
    Variable [ Name=$itv10 ]
  ]
Let Variable [ Name=$blnStartedBy2 ]
  :=
  FunctionCall asterix.interval-started-by@2[
    Variable [ Name=$itv10 ]
    Variable [ Name=$itv2 ]
  ]
Let Variable [ Name=$itv10 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [19000707T020202222]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2013-08-07T03:03:03.333]
    ]
  ]
Let Variable [ Name=$itv11 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [19990707T020202222]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2013-08-07T03:03:03.333]
    ]
  ]
Let Variable [ Name=$itv12 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [-19990707T020202222]
    ]
    FunctionCall asterix.datetime@1[
      LiteralExpr [STRING] [2013-08-07T03:03:03.333]
    ]
  ]
Let Variable [ Name=$blnCovers1 ]
  :=
  FunctionCall asterix.interval-covers@2[
    Variable [ Name=$itv10 ]
    Variable [ Name=$itv11 ]
  ]
Let Variable [ Name=$blnCovers2 ]
  :=
  FunctionCall asterix.interval-covers@2[
    Variable [ Name=$itv10 ]
    Variable [ Name=$itv12 ]
  ]
Let Variable [ Name=$blnCoveredBy1 ]
  :=
  FunctionCall asterix.interval-covered-by@2[
    Variable [ Name=$itv11 ]
    Variable [ Name=$itv10 ]
  ]
Let Variable [ Name=$blnCoveredBy2 ]
  :=
  FunctionCall asterix.interval-covered-by@2[
    Variable [ Name=$itv12 ]
    Variable [ Name=$itv10 ]
  ]
Let Variable [ Name=$itv11 ]
  :=
  FunctionCall asterix.interval@2[
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [19:00:00.009]
    ]
    FunctionCall asterix.time@1[
      LiteralExpr [STRING] [20:29:20.000]
    ]
  ]
Let Variable [ Name=$blnEnds1 ]
  :=
  FunctionCall asterix.interval-ends@2[
    Variable [ Name=$itv11 ]
    Variable [ Name=$itv7 ]
  ]
Let Variable [ Name=$blnEnds2 ]
  :=
  FunctionCall asterix.interval-ends@2[
    Variable [ Name=$itv11 ]
    Variable [ Name=$itv8 ]
  ]
Let Variable [ Name=$blnEndedBy1 ]
  :=
  FunctionCall asterix.interval-ended-by@2[
    Variable [ Name=$itv7 ]
    Variable [ Name=$itv11 ]
  ]
Let Variable [ Name=$blnEndedBy2 ]
  :=
  FunctionCall asterix.interval-ended-by@2[
    Variable [ Name=$itv8 ]
    Variable [ Name=$itv11 ]
  ]
Let Variable [ Name=$null1 ]
  :=
  FunctionCall asterix.interval-before@2[
    LiteralExpr [NULL]
    Variable [ Name=$itv2 ]
  ]
Let Variable [ Name=$null2 ]
  :=
  FunctionCall asterix.interval-covered-by@2[
    Variable [ Name=$itv11 ]
    LiteralExpr [NULL]
  ]
Let Variable [ Name=$null3 ]
  :=
  FunctionCall asterix.interval-overlapping@2[
    LiteralExpr [NULL]
    LiteralExpr [NULL]
  ]
SELECT ELEMENT [
RecordConstructor [
  (
    LiteralExpr [STRING] [before1]
    :
    Variable [ Name=$blnBefore1 ]
  )
  (
    LiteralExpr [STRING] [before2]
    :
    Variable [ Name=$blnBefore2 ]
  )
  (
    LiteralExpr [STRING] [after1]
    :
    Variable [ Name=$blnAfter1 ]
  )
  (
    LiteralExpr [STRING] [after2]
    :
    Variable [ Name=$blnAfter2 ]
  )
  (
    LiteralExpr [STRING] [meet1]
    :
    Variable [ Name=$blnMeet1 ]
  )
  (
    LiteralExpr [STRING] [meet2]
    :
    Variable [ Name=$blnMeet2 ]
  )
  (
    LiteralExpr [STRING] [metby1]
    :
    Variable [ Name=$blnMetBy1 ]
  )
  (
    LiteralExpr [STRING] [metby2]
    :
    Variable [ Name=$blnMetBy2 ]
  )
  (
    LiteralExpr [STRING] [overlaps1]
    :
    Variable [ Name=$blnOverlaps1 ]
  )
  (
    LiteralExpr [STRING] [overlaps2]
    :
    Variable [ Name=$blnOverlaps2 ]
  )
  (
    LiteralExpr [STRING] [overlapped1]
    :
    Variable [ Name=$blnOverlapped1 ]
  )
  (
    LiteralExpr [STRING] [overlapped2]
    :
    Variable [ Name=$blnOverlapped2 ]
  )
  (
    LiteralExpr [STRING] [overlap1]
    :
    Variable [ Name=$blnOverlap1 ]
  )
  (
    LiteralExpr [STRING] [overlap2]
    :
    Variable [ Name=$blnOverlap2 ]
  )
  (
    LiteralExpr [STRING] [starts1]
    :
    Variable [ Name=$blnStarts1 ]
  )
  (
    LiteralExpr [STRING] [starts2]
    :
    Variable [ Name=$blnStarts2 ]
  )
  (
    LiteralExpr [STRING] [startedby1]
    :
    Variable [ Name=$blnStartedBy1 ]
  )
  (
    LiteralExpr [STRING] [startedby2]
    :
    Variable [ Name=$blnStartedBy2 ]
  )
  (
    LiteralExpr [STRING] [covers1]
    :
    Variable [ Name=$blnCovers1 ]
  )
  (
    LiteralExpr [STRING] [covers2]
    :
    Variable [ Name=$blnCovers2 ]
  )
  (
    LiteralExpr [STRING] [coveredby1]
    :
    Variable [ Name=$blnCoveredBy1 ]
  )
  (
    LiteralExpr [STRING] [coveredby2]
    :
    Variable [ Name=$blnCoveredBy2 ]
  )
  (
    LiteralExpr [STRING] [ends1]
    :
    Variable [ Name=$blnEnds1 ]
  )
  (
    LiteralExpr [STRING] [ends2]
    :
    Variable [ Name=$blnEnds2 ]
  )
  (
    LiteralExpr [STRING] [endedby1]
    :
    Variable [ Name=$blnEndedBy1 ]
  )
  (
    LiteralExpr [STRING] [endedby2]
    :
    Variable [ Name=$blnEndedBy2 ]
  )
  (
    LiteralExpr [STRING] [null1]
    :
    Variable [ Name=$null1 ]
  )
  (
    LiteralExpr [STRING] [null2]
    :
    Variable [ Name=$null2 ]
  )
  (
    LiteralExpr [STRING] [null3]
    :
    Variable [ Name=$null3 ]
  )
]
]
