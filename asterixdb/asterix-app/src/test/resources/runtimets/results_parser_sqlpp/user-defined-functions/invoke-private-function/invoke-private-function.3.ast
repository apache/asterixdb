DataverseUse test
Query:
Let Variable [ Name=$a ]
  :=
  OrderedListConstructor [
  ]
Let Variable [ Name=$b ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
  ]
Let Variable [ Name=$c ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
  ]
Let Variable [ Name=$d ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [jkl]
  ]
Let Variable [ Name=$e ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [cde]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
  ]
Let Variable [ Name=$f ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [jkl]
    LiteralExpr [STRING] [cde]
  ]
Let Variable [ Name=$g ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [Efg]
    LiteralExpr [STRING] [aBc]
    LiteralExpr [STRING] [cdE]
    LiteralExpr [STRING] [DEf]
    LiteralExpr [STRING] [hIJ]
    LiteralExpr [STRING] [IjK]
    LiteralExpr [STRING] [BCD]
  ]
Let Variable [ Name=$h ]
  :=
  OrderedListConstructor [
    LiteralExpr [STRING] [abc]
    LiteralExpr [STRING] [ijk]
    LiteralExpr [STRING] [bcd]
    LiteralExpr [STRING] [efg]
    LiteralExpr [STRING] [fgh]
    LiteralExpr [STRING] [ghi]
    LiteralExpr [STRING] [def]
    LiteralExpr [STRING] [hij]
    LiteralExpr [STRING] [jkl]
    LiteralExpr [STRING] [cde]
  ]
Let Variable [ Name=$results ]
  :=
  OrderedListConstructor [
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$a ]
      Variable [ Name=$b ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$b ]
      Variable [ Name=$a ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$c ]
      Variable [ Name=$d ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$d ]
      Variable [ Name=$c ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$e ]
      Variable [ Name=$f ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$f ]
      Variable [ Name=$e ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$g ]
      Variable [ Name=$h ]
    ]
    FunctionCall asterix.similarity-jaccard@2[
      Variable [ Name=$h ]
      Variable [ Name=$g ]
    ]
  ]
SELECT ELEMENT [
Variable [ Name=$i ]
]
FROM [  Variable [ Name=$results ]
  AS Variable [ Name=$i ]
]
