DataverseUse test
Query:
OrderedListConstructor [
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    >
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    >=
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    <
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    <=
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    =
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    !=
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    >
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    >=
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    <
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    <=
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    =
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
    !=
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    =
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
    =
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0A0A]
    ]
    =
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cw==]
    ]
  ]
  OperatorExpr [
    FunctionCall asterix.hex@1[
      LiteralExpr [STRING] [0B]
    ]
    =
    FunctionCall asterix.base64@1[
      LiteralExpr [STRING] [Cgo=]
    ]
  ]
]
