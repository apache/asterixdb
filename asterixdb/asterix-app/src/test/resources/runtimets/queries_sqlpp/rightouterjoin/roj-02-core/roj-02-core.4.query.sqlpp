/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

use test;

/* RIGHT JOIN, LEFT UNNEST */

use test;

SELECT
    if_missing(t0.fivethous, null) AS t0_fivethous,
    if_missing(t0_n.unique1, null) AS t0_n_unique1,
    if_missing(t1.fivethous, null) AS t1_fivethous,
    if_missing(t1.unique1, null) AS t1_unique1
FROM (
  SELECT fivethous, g
  FROM tenkNested5000
  WHERE fivethous < 1
) t0
RIGHT JOIN (
  SELECT fivethous, unique1 FROM tenk WHERE fivethous < 2
) t1 ON t0.fivethous = t1.fivethous
LEFT UNNEST t0.g AS t0_n
ORDER BY t1_fivethous, t1_unique1, t0_n_unique1;
