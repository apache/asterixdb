distribute result [$$35]
-- DISTRIBUTE_RESULT  |PARTITIONED|
  exchange
  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
    assign [$$35] <- [{"business_id": $$40}] project: [$$35]
    -- ASSIGN  |PARTITIONED|
      select (and($$30, eq($$31, 0))) project: [$$40]
      -- STREAM_SELECT  |PARTITIONED|
        project ([$$40, $$30, $$31])
        -- STREAM_PROJECT  |PARTITIONED|
          subplan {
                    aggregate [$$30, $$31] <- [non-empty-stream(), agg-sql-count(switch-case(and(ge($$38, "2016"), le($$38, "2017")), true, null, true))]
                    -- AGGREGATE  |LOCAL|
                      assign [$$38] <- [$$D.getField(0)]
                      -- ASSIGN  |LOCAL|
                        unnest $$D <- scan-collection($$37) project: [$$D]
                        -- UNNEST  |LOCAL|
                          project ([$$37])
                          -- STREAM_PROJECT  |LOCAL|
                            nested tuple source
                            -- NESTED_TUPLE_SOURCE  |LOCAL|
                 }
          -- SUBPLAN  |PARTITIONED|
            assign [$$40, $$37] <- [$$C.getField(1), $$C.getField(2)] project: [$$40, $$37]
            -- ASSIGN  |PARTITIONED|
              project ([$$C])
              -- STREAM_PROJECT  |PARTITIONED|
                exchange
                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                  data-scan []<-[$$36, $$C] <- TestYelp.YelpCheckin
                  -- DATASOURCE_SCAN  |PARTITIONED|
                    exchange
                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                      empty-tuple-source
                      -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
