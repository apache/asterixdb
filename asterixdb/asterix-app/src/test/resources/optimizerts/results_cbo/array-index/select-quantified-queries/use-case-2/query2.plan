distribute result [$$51]
-- DISTRIBUTE_RESULT  |UNPARTITIONED|
  exchange
  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|
    assign [$$51] <- [{"$1": $$53}] project: [$$51]
    -- ASSIGN  |UNPARTITIONED|
      aggregate [$$53] <- [agg-sql-sum($$56)]
      -- AGGREGATE  |UNPARTITIONED|
        exchange
        -- RANDOM_MERGE_EXCHANGE  |PARTITIONED|
          aggregate [$$56] <- [agg-sql-count(1)]
          -- AGGREGATE  |PARTITIONED|
            select ($$44)
            -- STREAM_SELECT  |PARTITIONED|
              project ([$$44])
              -- STREAM_PROJECT  |PARTITIONED|
                subplan {
                          aggregate [$$44] <- [non-empty-stream()]
                          -- AGGREGATE  |LOCAL|
                            select (and(gt($$D, "2016"), lt($$D, "2017")))
                            -- STREAM_SELECT  |LOCAL|
                              unnest $$D <- scan-collection($$54) project: [$$D]
                              -- UNNEST  |LOCAL|
                                project ([$$54])
                                -- STREAM_PROJECT  |LOCAL|
                                  nested tuple source
                                  -- NESTED_TUPLE_SOURCE  |LOCAL|
                       }
                -- SUBPLAN  |PARTITIONED|
                  assign [$$54] <- [$$C.getField(2).getField(0)] project: [$$54]
                  -- ASSIGN  |PARTITIONED|
                    project ([$$C])
                    -- STREAM_PROJECT  |PARTITIONED|
                      exchange
                      -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                        data-scan []<-[$$52, $$C] <- TestYelp.YelpCheckin
                        -- DATASOURCE_SCAN  |PARTITIONED|
                          exchange
                          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                            empty-tuple-source
                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
