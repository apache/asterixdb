distribute result [$$41]
-- DISTRIBUTE_RESULT  |PARTITIONED|
  exchange
  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
    project ([$$41])
    -- STREAM_PROJECT  |PARTITIONED|
      assign [$$41] <- [{"D": $$D}]
      -- ASSIGN  |PARTITIONED|
        project ([$$D])
        -- STREAM_PROJECT  |PARTITIONED|
          select (and($$37, eq($$38, 0)))
          -- STREAM_SELECT  |PARTITIONED|
            project ([$$D, $$37, $$38])
            -- STREAM_PROJECT  |PARTITIONED|
              subplan {
                        aggregate [$$37, $$38] <- [non-empty-stream(), agg-sql-count(switch-case(and(eq($$I, 1), eq($$J, 2)), true, null, true))]
                        -- AGGREGATE  |LOCAL|
                          unnest $$J <- scan-collection($$44)
                          -- UNNEST  |LOCAL|
                            unnest $$I <- scan-collection($$43)
                            -- UNNEST  |LOCAL|
                              nested tuple source
                              -- NESTED_TUPLE_SOURCE  |LOCAL|
                     }
              -- SUBPLAN  |PARTITIONED|
                assign [$$44, $$43] <- [$$D.getField("other_items"), $$D.getField("items")]
                -- ASSIGN  |PARTITIONED|
                  project ([$$D])
                  -- STREAM_PROJECT  |PARTITIONED|
                    exchange
                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                      data-scan []<-[$$42, $$D] <- TestDataverse.Dataset1
                      -- DATASOURCE_SCAN  |PARTITIONED|
                        exchange
                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                          empty-tuple-source
                          -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
