distribute result [$$52]
-- DISTRIBUTE_RESULT  |UNPARTITIONED|
  exchange
  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|
    assign [$$52] <- [{"$1": $$54}] project: [$$52]
    -- ASSIGN  |UNPARTITIONED|
      aggregate [$$54] <- [agg-sql-sum($$57)]
      -- AGGREGATE  |UNPARTITIONED|
        exchange
        -- RANDOM_MERGE_EXCHANGE  |PARTITIONED|
          aggregate [$$57] <- [agg-sql-count(1)]
          -- AGGREGATE  |PARTITIONED|
            select (and($$43, eq($$44, 0)))
            -- STREAM_SELECT  |PARTITIONED|
              project ([$$43, $$44])
              -- STREAM_PROJECT  |PARTITIONED|
                subplan {
                          aggregate [$$43, $$44] <- [non-empty-stream(), agg-sql-count(switch-case(eq(lowercase($$D), "2016"), true, null, true))]
                          -- AGGREGATE  |LOCAL|
                            unnest $$D <- scan-collection($$55)
                            -- UNNEST  |LOCAL|
                              project ([$$55])
                              -- STREAM_PROJECT  |LOCAL|
                                nested tuple source
                                -- NESTED_TUPLE_SOURCE  |LOCAL|
                       }
                -- SUBPLAN  |PARTITIONED|
                  assign [$$55] <- [$$C.getField(2).getField(0)] project: [$$55]
                  -- ASSIGN  |PARTITIONED|
                    project ([$$C])
                    -- STREAM_PROJECT  |PARTITIONED|
                      exchange
                      -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                        data-scan []<-[$$53, $$C] <- TestYelp.YelpCheckin
                        -- DATASOURCE_SCAN  |PARTITIONED|
                          exchange
                          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                            empty-tuple-source
                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
