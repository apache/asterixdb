distribute result [$$49]
-- DISTRIBUTE_RESULT  |UNPARTITIONED|
  exchange
  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|
    project ([$$49])
    -- STREAM_PROJECT  |UNPARTITIONED|
      assign [$$49] <- [{"$1": $$51}]
      -- ASSIGN  |UNPARTITIONED|
        aggregate [$$51] <- [agg-sql-sum($$54)]
        -- AGGREGATE  |UNPARTITIONED|
          exchange
          -- RANDOM_MERGE_EXCHANGE  |PARTITIONED|
            aggregate [$$54] <- [agg-sql-count(1)]
            -- AGGREGATE  |PARTITIONED|
              select (and($$40, eq($$41, 0)))
              -- STREAM_SELECT  |PARTITIONED|
                project ([$$40, $$41])
                -- STREAM_PROJECT  |PARTITIONED|
                  subplan {
                            aggregate [$$40, $$41] <- [non-empty-stream(), agg-sql-count(switch-case(eq(lowercase($$D), "2016"), true, null, true))]
                            -- AGGREGATE  |LOCAL|
                              unnest $$D <- scan-collection($$52)
                              -- UNNEST  |LOCAL|
                                nested tuple source
                                -- NESTED_TUPLE_SOURCE  |LOCAL|
                         }
                  -- SUBPLAN  |PARTITIONED|
                    project ([$$52])
                    -- STREAM_PROJECT  |PARTITIONED|
                      assign [$$52] <- [$$C.getField(2).getField(0)]
                      -- ASSIGN  |PARTITIONED|
                        project ([$$C])
                        -- STREAM_PROJECT  |PARTITIONED|
                          exchange
                          -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                            data-scan []<-[$$50, $$C] <- TestYelp.YelpCheckin
                            -- DATASOURCE_SCAN  |PARTITIONED|
                              exchange
                              -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|
                                empty-tuple-source
                                -- EMPTY_TUPLE_SOURCE  |PARTITIONED|
