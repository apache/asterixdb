DataverseUse test
TypeDecl AddressType [
  closed RecordType {
    number : integer,
    street : string,
    city : string
  }
]
TypeDecl CustomerType [
  closed RecordType {
    cid : integer,
    name : string,
    age : integer?,
    address : AddressType?,
    interests : UnorderedList <string>
,
    children : OrderedList [          open RecordType {
            name : string,
            age : integer?
          }
]

  }
]
DatasetDecl Customers(CustomerType) partitioned by [[cid]]
WriteOutputTo asterix_nc1:rttest/inverted-index-join_ulist-jaccard-check_04.adm
Query:
SELECT ELEMENT [
RecordConstructor [
  (
    LiteralExpr [STRING] [arec]
    :
    Variable [ Name=$a ]
  )
  (
    LiteralExpr [STRING] [brec]
    :
    Variable [ Name=$b ]
  )
  (
    LiteralExpr [STRING] [jacc]
    :
    IndexAccessor [
      Variable [ Name=$jacc ]
      Index:       LiteralExpr [LONG] [1]
    ]
  )
]
]
FROM [  FunctionCall asterix.dataset@1[
    LiteralExpr [STRING] [test.Customers]
  ]
  AS Variable [ Name=$a ]
,
  FunctionCall asterix.dataset@1[
    LiteralExpr [STRING] [test.Customers]
  ]
  AS Variable [ Name=$b ]
]
Let Variable [ Name=$jacc ]
  :=
  FunctionCall asterix.similarity-jaccard-check@3[
    FieldAccessor [
      Variable [ Name=$a ]
      Field=interests
    ]
    FieldAccessor [
      Variable [ Name=$b ]
      Field=interests
    ]
    LiteralExpr [FLOAT] [0.7]
  ]
Where
  OperatorExpr [
    IndexAccessor [
      Variable [ Name=$jacc ]
      Index:       LiteralExpr [LONG] [0]
    ]
    and
    OperatorExpr [
      FieldAccessor [
        Variable [ Name=$a ]
        Field=cid
      ]
      <
      FieldAccessor [
        Variable [ Name=$b ]
        Field=cid
      ]
    ]
  ]
