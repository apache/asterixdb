DataverseUse test
TypeDecl TwitterUserType [
  open RecordType {
    screen_name : string,
    lang : string,
    friends_count : integer,
    statuses_count : integer,
    name : string,
    followers_count : integer
  }
]
TypeDecl TweetMessageType [
  open RecordType {
    tweetid : bigint,
    user : TwitterUserType,
    sender_location : point?,
    send_time : datetime,
    referred_topics : UnorderedList <string>
,
    message_text : string
  }
]
DatasetDecl TweetMessages(TweetMessageType) partitioned by [[tweetid]]
WriteOutputTo asterix_nc1:rttest/inverted-index-join_issue741.adm
Query:
SELECT ELEMENT [
RecordConstructor [
  (
    LiteralExpr [STRING] [tweet]
    :
    FieldAccessor [
      Variable [ Name=$t ]
      Field=tweetid
    ]
  )
  (
    LiteralExpr [STRING] [similar-tweets]
    :
    (
      SELECT ELEMENT [
      FieldAccessor [
        Variable [ Name=$t2 ]
        Field=tweetid
      ]
      ]
      FROM [        FunctionCall asterix.dataset@1[
          LiteralExpr [STRING] [test.TweetMessages]
        ]
        AS Variable [ Name=$t2 ]
      ]
      Let Variable [ Name=$sim ]
        :=
        FunctionCall asterix.similarity-jaccard-check@3[
          FieldAccessor [
            Variable [ Name=$t ]
            Field=referred_topics
          ]
          FieldAccessor [
            Variable [ Name=$t2 ]
            Field=referred_topics
          ]
          LiteralExpr [FLOAT] [0.6]
        ]
      Where
        OperatorExpr [
          IndexAccessor [
            Variable [ Name=$sim ]
            Index:             LiteralExpr [LONG] [0]
          ]
          and
          OperatorExpr [
            FieldAccessor [
              Variable [ Name=$t2 ]
              Field=tweetid
            ]
            !=
            FieldAccessor [
              Variable [ Name=$t ]
              Field=tweetid
            ]
          ]
        ]
    )
  )
]
]
FROM [  FunctionCall asterix.dataset@1[
    LiteralExpr [STRING] [test.TweetMessages]
  ]
  AS Variable [ Name=$t ]
]
Where
  OperatorExpr [
    OperatorExpr [
      FieldAccessor [
        Variable [ Name=$t ]
        Field=send_time
      ]
      >=
      FunctionCall asterix.datetime@1[
        LiteralExpr [STRING] [2011-06-18T14:10:17]
      ]
    ]
    and
    OperatorExpr [
      FieldAccessor [
        Variable [ Name=$t ]
        Field=send_time
      ]
      <
      FunctionCall asterix.datetime@1[
        LiteralExpr [STRING] [2011-06-18T15:10:17]
      ]
    ]
  ]
