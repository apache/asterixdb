DataverseUse test
TypeDecl TwitterUserType [
  closed RecordType {
    screen-name : string,
    lang : string,
    friends-count : integer,
    statuses-count : integer,
    name : string,
    followers-count : integer
  }
]
TypeDecl TweetMessageNestedType [
  open RecordType {
    tweetid : bigint,
    user : TwitterUserType,
    sender-location : point,
    send-time : datetime,
    referred-topics : UnorderedList <string>
,
    countA : integer,
    countB : integer
  }
]
TypeDecl TweetMessageType [
  closed RecordType {
    nested : TweetMessageNestedType
  }
]
DatasetDecl TweetMessages(TweetMessageType) partitioned by [[nested, tweetid]]
WriteOutputTo asterix_nc1:rttest/inverted-index-join_word-jaccard-check-after-btree-access.adm
Query:
SELECT ELEMENT [
RecordConstructor [
  (
    LiteralExpr [STRING] [t1]
    :
    FieldAccessor [
      FieldAccessor [
        Variable [ Name=$t1 ]
        Field=nested
      ]
      Field=tweetid
    ]
  )
  (
    LiteralExpr [STRING] [t2]
    :
    FieldAccessor [
      FieldAccessor [
        Variable [ Name=$t2 ]
        Field=nested
      ]
      Field=tweetid
    ]
  )
  (
    LiteralExpr [STRING] [sim]
    :
    IndexAccessor [
      Variable [ Name=$sim ]
      Index:       LiteralExpr [LONG] [1]
    ]
  )
]
]
FROM [  FunctionCall asterix.dataset@1[
    LiteralExpr [STRING] [test.TweetMessages]
  ]
  AS Variable [ Name=$t1 ]
,
  FunctionCall asterix.dataset@1[
    LiteralExpr [STRING] [test.TweetMessages]
  ]
  AS Variable [ Name=$t2 ]
]
Let Variable [ Name=$sim ]
  :=
  FunctionCall asterix.similarity-jaccard-check@3[
    FunctionCall asterix.word-tokens@1[
      FieldAccessor [
        FieldAccessor [
          Variable [ Name=$t1 ]
          Field=nested
        ]
        Field=message-text
      ]
    ]
    FunctionCall asterix.word-tokens@1[
      FieldAccessor [
        FieldAccessor [
          Variable [ Name=$t2 ]
          Field=nested
        ]
        Field=message-text
      ]
    ]
    LiteralExpr [FLOAT] [0.6]
  ]
Where
  OperatorExpr [
    IndexAccessor [
      Variable [ Name=$sim ]
      Index:       LiteralExpr [LONG] [0]
    ]
    and
    OperatorExpr [
      FieldAccessor [
        FieldAccessor [
          Variable [ Name=$t1 ]
          Field=nested
        ]
        Field=tweetid
      ]
      <
      FunctionCall asterix.int64@1[
        LiteralExpr [STRING] [20]
      ]
    ]
    and
    OperatorExpr [
      FieldAccessor [
        FieldAccessor [
          Variable [ Name=$t2 ]
          Field=nested
        ]
        Field=tweetid
      ]
      !=
      FieldAccessor [
        FieldAccessor [
          Variable [ Name=$t1 ]
          Field=nested
        ]
        Field=tweetid
      ]
    ]
  ]
